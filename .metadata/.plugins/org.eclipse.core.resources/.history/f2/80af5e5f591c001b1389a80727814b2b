/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include "stm32f4xx.h"

#include "FreeRTOS.h"
#include "task.h"

#define TRUE 1
#define FALSE 0
#define NOT_PRESSED FALSE
#define PRESSED TRUE

TaskHandle_t xTaskHandle1 = NULL;
TaskHandle_t xTaskHandle2 = NULL;

// Function prototypes
static void prvSetupHardware(void);
void printmsg(char *msg);
static void prvSetupUart(void);
void prvSetupGpio(void);
void rtos_delay(uint32_t delay_in_ms);
			
// Task prototypes
void vTask1_handler(void *params);
void vTask2_handler(void *params);

// Global space for some variables
char usr_msg[250] = {0};
uint8_t switch_prio = FALSE;

int main(void)
{
	//1. Resets the RCC clock configuration to the default reset state.
	//HSI ON, PLL OFF, HSE OFF, system clock = 16MHz, cpu_clock = 16MHz
	RCC_DeInit();

	//2. Update the SystemCoreClock variable.
	SystemCoreClockUpdate();

	prvSetupHardware();

	sprintf(usr_msg,"Esta es la Demo de 'Task Priority APIs'\r\n");
	printmsg(usr_msg);

	//Start Recording
	SEGGER_SYSVIEW_Conf();
	SEGGER_SYSVIEW_Start();

	// Let's create Task 1
	xTaskCreate(vTask1_handler, "Task-1", 500, NULL, 2, &xTaskHandle1);

	// Let's create Task 2
	xTaskCreate(vTask2_handler, "Task-2", 500, NULL, 3, &xTaskHandle2);

	// Let's start the scheduler
	vTaskStartScheduler();

	for(;;);
}

void vTask1_handler(void *params)
{
	UBaseType_t p1,p2;

	// Se imprime por pantalla una sola vez que la tarea 1 se está ejecutando
	sprintf(usr_msg, "La Tarea-1 se está ejecutando \r\n");
	printmsg(usr_msg);

	sprintf(usr_msg, "La prioridad de la Tarea-1 es: %lu \r\n", uxTaskPriorityGet(xTaskHandle1));
	printmsg(usr_msg);

	sprintf(usr_msg, "La prioridad de la Tarea-2 es: %lu \r\n", uxTaskPriorityGet(xTaskHandle2));
	printmsg(usr_msg);

	while(1)
	{
		// El LED (GPIO A5) parpadea cada 100ms.
		rtos_delay(100);
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);

		if(switch_prio)
				{
					switch_prio = FALSE;

					sprintf(usr_msg, "Las prioridades de ambas tareas se intercambian. La Tarea-2 tiene ahora máxima prioridad. \r\n");
					printmsg(usr_msg);

					p1 = uxTaskPriorityGet(xTaskHandle1);
					p2 = uxTaskPriorityGet(xTaskHandle2);

					// Si hay interrupción del botón, se cambia las prioridades de las tareas
					vTaskPrioritySet(xTaskHandle1,p2);
					vTaskPrioritySet(xTaskHandle2,p1);
				}
	}

}

void vTask2_handler(void *params)
{
	UBaseType_t p1,p2;

	// Se imprime por pantalla una sola vez que la tarea 2 se está ejecutando
	sprintf(usr_msg, "La Tarea-2 se está ejecutando \r\n");
	printmsg(usr_msg);

	sprintf(usr_msg, "La prioridad de la Tarea-1 es: %lu \r\n", uxTaskPriorityGet(xTaskHandle1));
	printmsg(usr_msg);

	sprintf(usr_msg, "La prioridad de la Tarea-2 es: %lu \r\n", uxTaskPriorityGet(xTaskHandle2));
	printmsg(usr_msg);

	while(1)
	{
		// El LED parpadea cada segundo
		rtos_delay(1000);
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);

		if(switch_prio)
			{
				switch_prio = FALSE;

				sprintf(usr_msg, "Las prioridades de ambas tareas se intercambian. La Tarea-1 tiene ahora máxima prioridad. \r\n");
				printmsg(usr_msg);

				p1 = uxTaskPriorityGet(xTaskHandle1);
				p2 = uxTaskPriorityGet(xTaskHandle2);

				// Si hay interrupción del botón, se cambia las prioridades de las tareas
				vTaskPrioritySet(xTaskHandle1,p2);
				vTaskPrioritySet(xTaskHandle2,p1);
			}
	}
}

static void prvSetupHardware(void)
{
	//setup button and LED
	prvSetupGpio();

	//setup UART2
	prvSetupUart();
}

void printmsg(char *msg)
{
	for(uint32_t i = 0; i < strlen(msg); i++)
	{
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) != SET);
		USART_SendData(USART2, msg[i]);
	}

}

static void prvSetupUart(void)
{
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart2_init;

	//1. Enable the UART2 and GPIOA Peripheral clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);

	//PA2 is UART2_TX, PA3 is UART2_RX

	//2. Alternate function configuration of MCU pins to behave as UART2 TX and RX

	//zeroing each and every member element of the structure
	memset(&gpio_uart_pins,0,sizeof(gpio_uart_pins));

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &gpio_uart_pins);

	//3. AF mode settings for the pins
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2); //PA2
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2); //PA3

	//4. UART parameters initializations

	//zeroing each and every member element of the structure
	memset(&uart2_init,0,sizeof(uart2_init));

	uart2_init.USART_BaudRate = 115200;
	uart2_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	uart2_init.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	uart2_init.USART_Parity = USART_Parity_No;
	uart2_init.USART_StopBits = USART_StopBits_1;
	uart2_init.USART_WordLength = USART_WordLength_8b;
	USART_Init(USART2, &uart2_init);

	//5. Enable the UART2 peripheral
	USART_Cmd(USART2, ENABLE);
}

void prvSetupGpio(void)
{
	// Activa las señales de reloj de los periféricos
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	//Inicializa GPIO A5 (LED) según los parámetros de debajo
	GPIO_InitTypeDef led_init, button_init;
	led_init.GPIO_Mode = GPIO_Mode_OUT;
	led_init.GPIO_OType = GPIO_OType_PP;
	led_init.GPIO_Pin = GPIO_Pin_5;
	led_init.GPIO_Speed = GPIO_Low_Speed;
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &led_init);

	//Inicializa GPIO C13 (USER BUTTON) según los parámetros de debajo
	button_init.GPIO_Mode = GPIO_Mode_IN;
	button_init.GPIO_OType = GPIO_OType_PP;
	button_init.GPIO_Pin = GPIO_Pin_13;
	button_init.GPIO_Speed = GPIO_Low_Speed;
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOC, &button_init);

	//Configuración para la interrupción del botón (GPIO C13)
	//1. Configuración del sistema para la línea EXTI (SYSCFG)
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC,EXTI_PinSource13);

	//2. Configuración de la línea 13 del EXTI: flanco de bajada y modo interrupción.
	EXTI_InitTypeDef exti_init;
	exti_init.EXTI_Line = EXTI_Line13;
	exti_init.EXTI_Mode = EXTI_Mode_Interrupt;
	exti_init.EXTI_Trigger = EXTI_Trigger_Falling;
	exti_init.EXTI_LineCmd = ENABLE;
	EXTI_Init(&exti_init);

	//3. Configuración del NVIC (Configuración de la interrupción para la línea EXTI seleccionada (13).
	NVIC_SetPriority(EXTI15_10_IRQn,5);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
}

// Función para el controlador de interrupción del botón
void EXTI15_10_IRQHandler(void)
{
	traceISR_ENTER();
	//1. Limpia el bit de interrupción pendiente de la línea 13 del EXTI (13).
	EXTI_ClearITPendingBit(EXTI_Line13);
	switch_prio = TRUE;
	traceISR_EXIT();
}

// Función para hacer delay en milisegundos una tarea independientemente del ratio de ticks
void rtos_delay(uint32_t delay_in_ms)
{
	uint32_t current_tick_count = xTaskGetTickCount();
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ) / 1000;
	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks));
}
