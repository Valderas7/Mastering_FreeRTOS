/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include "stm32f4xx.h"

#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"

#define TRUE 1
#define FALSE 0
#define NOT_PRESSED FALSE
#define PRESSED TRUE

// Function prototypes
static void prvSetupHardware(void);
void printmsg(char *msg);
static void prvSetupUart(void);
void prvSetupGpio(void);
void rtos_delay(uint32_t delay_in_ms);
			
// Prototipos de las cuatro tareas
void vTask1_menu_display(void *params);
void vTask2_cmd_handling(void *params);
void vTask3_cmd_processing(void *params);
void vTask4_uart_write(void *params);

// Espacio para algunas variables globales
char usr_msg[250] = {0};

// Identificador de tareas
TaskHandle_t xTaskHandle1 = NULL;
TaskHandle_t xTaskHandle2 = NULL;
TaskHandle_t xTaskHandle3 = NULL;
TaskHandle_t xTaskHandle4 = NULL;

// Identificador de colas
QueueHandle_t command_queue=NULL;

// Estructura de comandos
typedef struct APP_CMD
{
	uint8_t COMMAND_NUM;
	uint8_t COMMAND_ARGS[10];
}APP_CMD_t;

int main(void)
{
	DWT->CTRL |= (1 << 0); //Activa el contador de ciclos (CYCCNT) en el registro de control (CTRL).

	//1. Resets the RCC clock configuration to the default reset state.
	//HSI ON, PLL OFF, HSE OFF, system clock = 16MHz, cpu_clock = 16MHz
	RCC_DeInit();

	//2. Update the SystemCoreClock variable.
	SystemCoreClockUpdate();

	prvSetupHardware();

	sprintf(usr_msg,"Esta es la Demo de 'Queue Processing'\r\n");
	printmsg(usr_msg);

	// Se crea la cola de comandos. El puntero ahorra memoria. Se gastan 40 (4x10) bytes en vez de 110 (11x10) que se gastarían sin el puntero.
	command_queue = xQueueCreate(10,sizeof(APP_CMD_t*));

	// Empieza la grabación con SEGGER
	SEGGER_SYSVIEW_Conf();
	SEGGER_SYSVIEW_Start();

	// Sólo si la cola no es nula, se crean las tareas y el planificador
	if (command_queue != NULL)
	{
		// Se crea la Tarea-1 (Menú)
		xTaskCreate(vTask1_menu_display, "Task1-MENÚ", 500, NULL, 1, &xTaskHandle1);

		// Se crea la Tarea-2
		xTaskCreate(vTask2_cmd_handling, "Task2-CMD-HANDLING", 500, NULL, 1, &xTaskHandle2);

		// Se crea la Tarea-3
		xTaskCreate(vTask3_cmd_processing, "Task3-CMD-PROCESS", 500, NULL, 1, &xTaskHandle3);

		// Se crea la Tarea-4
		xTaskCreate(vTask4_uart_write, "Task4-UART-WRITE", 500, NULL, 1, &xTaskHandle4);

		// Se crea el planificador
		vTaskStartScheduler();
	}
	else
	{
		sprintf(usr_msg,"La creación de la cola falló. \r\n");
		printmsg(usr_msg);
	}

	for(;;);
}

void vTask1_menu_display(void *params)
{
	while(1)
	{
		// Se imprime el estado del LED (GPIO A5) por el UART
		sprintf(usr_msg,"El estado del LED es %d. \r\n", GPIO_ReadOutputDataBit(GPIOA,GPIO_Pin_5));
		printmsg(usr_msg);
		// Se bloquea la tarea durante 1 seg (1000 ticks).
		vTaskDelay(pdMS_TO_TICKS(1000));
	}
}

void vTask2_cmd_handling(void *params)
{
	while(1)
	{
		// El LED (GPIO A5) parpadea cada 1000ms.
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		// Se bloquea la tarea durante 1000 ticks (1 segundo).
		vTaskDelay(pdMS_TO_TICKS(1000));
	}
}

void vTask3_cmd_processing(void *params)
{
	while(1)
	{

	}
}

void vTask4_uart_write(void *params)
{
	while(1)
	{

	}
}

static void prvSetupHardware(void)
{
	//setup button and LED
	prvSetupGpio();

	//setup UART2
	prvSetupUart();
}

void printmsg(char *msg)
{
	for(uint32_t i = 0; i < strlen(msg); i++)
	{
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) != SET);
		USART_SendData(USART2, msg[i]);
	}

}

static void prvSetupUart(void)
{
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart2_init;

	//1. Activa el reloj de los periféricos UART2 y GPIOA.
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);

	//PA2 es UART2_TX, PA3 es UART2_RX

	//2. Alternate function configuration of MCU pins to behave as UART2 TX and RX

	//zeroing each and every member element of the structure
	memset(&gpio_uart_pins,0,sizeof(gpio_uart_pins));

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &gpio_uart_pins);

	//3. Ajustes del modo 'función alternativa' para los pines
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2); //PA2
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2); //PA3

	//4. Parámetros de inicialización del UART

	//Inicializar a cero todos y cada uno de los miembros de la estructura.
	memset(&uart2_init,0,sizeof(uart2_init));

	uart2_init.USART_BaudRate = 115200;
	uart2_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	uart2_init.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	uart2_init.USART_Parity = USART_Parity_No;
	uart2_init.USART_StopBits = USART_StopBits_1;
	uart2_init.USART_WordLength = USART_WordLength_8b;
	USART_Init(USART2, &uart2_init);

	//5. Enable the UART2 peripheral
	USART_Cmd(USART2, ENABLE);
}

void prvSetupGpio(void)
{
	// Activa las señales de reloj de los periféricos
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	//Inicializa GPIO A5 (LED) según los parámetros de debajo
	GPIO_InitTypeDef led_init, button_init;
	led_init.GPIO_Mode = GPIO_Mode_OUT;
	led_init.GPIO_OType = GPIO_OType_PP;
	led_init.GPIO_Pin = GPIO_Pin_5;
	led_init.GPIO_Speed = GPIO_Low_Speed;
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &led_init);

	//Inicializa GPIO C13 (USER BUTTON) según los parámetros de debajo
	button_init.GPIO_Mode = GPIO_Mode_IN;
	button_init.GPIO_OType = GPIO_OType_PP;
	button_init.GPIO_Pin = GPIO_Pin_13;
	button_init.GPIO_Speed = GPIO_Low_Speed;
	button_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOC, &button_init);
}

void rtos_delay(uint32_t delay_in_ms)
{
	uint32_t current_tick_count = xTaskGetTickCount();
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ) / 1000;
	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks));
}
